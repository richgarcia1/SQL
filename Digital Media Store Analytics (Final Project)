-- This project utilizes a database with 11 tables called chinook, which represents a digital media store.  

-- I am querying the database to quantify statistics about sales, artists, albums, media tracks, genre, employees, invoices and customers.

-- The database is large and not practical to include below, here is a link to find it on https://cdn.fs.teachablecdn.com/dRmwOLQsS22FVFbXfh3x



-- displays which artist have more than 1 album

SELECT artists.name, COUNT(albums.AlbumId) AS albums_count
FROM artists
LEFT JOIN albums ON artists.ArtistId = albums.ArtistId
GROUP BY artists.name
HAVING COUNT(albums.AlbumId) > 1
ORDER BY albums_count DESC
;



-- displays which artist sold more

SELECT artists.Name, SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS total_sales
FROM artists
LEFT JOIN albums ON artists.ArtistId = albums.ArtistId
LEFT JOIN tracks ON albums.AlbumId = tracks.AlbumId
LEFT JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
LEFT JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
GROUP BY artists.Name
HAVING total_sales IS NOT NULL
ORDER BY total_sales DESC
;



-- displays which genre sold more

SELECT genres.Name AS genre_name, 
       SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS total_sales
FROM genres
JOIN tracks ON genres.GenreId = tracks.GenreId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
GROUP BY genres.Name
ORDER BY total_sales DESC
;



-- displays all customers not located in the usa

SELECT CustomerId, FirstName, LastName, Country
FROM customers
WHERE Country != 'USA'
;



-- displays invoice details from brazilian customers

SELECT customers.CustomerId, customers.FirstName, customers.LastName, 
       strftime('%Y-%m-%d', InvoiceDate) AS Invoice_Date, invoices.BillingCountry
FROM customers
INNER JOIN invoices ON customers.CustomerId = invoices.CustomerId
WHERE invoices.BillingCountry = 'Brazil'
;



-- displays a distinct list of which billing countries 

SELECT DISTINCT BillingCountry 
FROM invoices
;



-- displays sales agents from the employees list

SELECT Employeeid, LastName, FirstName, Title 
FROM employees
WHERE Title = 'Sales Support Agent'
;



-- displays invoices associated with each sales agent

SELECT employees.LastName, employees.FirstName, invoices.InvoiceId  
FROM employees
LEFT JOIN customers ON employees.EmployeeId = customers.SupportRepId
INNER JOIN invoices ON customers.CustomerId = invoices.CustomerId
WHERE invoices.InvoiceId IS NOT NULL
;



-- displays total sales and revenue for each sales agent

SELECT employees.LastName, employees.FirstName, COUNT(invoices.InvoiceId) AS total_sales, 
       SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS total_revenue
FROM employees
LEFT JOIN customers ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices ON customers.CustomerId = invoices.CustomerId
LEFT JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
WHERE invoices.InvoiceId IS NOT NULL
GROUP BY employees.LastName, employees.FirstName
ORDER BY total_revenue DESC
;



-- displays invoice total, customer name, country and sales agent name for all invoices 

SELECT invoices.InvoiceId, customers.FirstName || ' ' || customers.LastName AS Customer_Name, 
       customers.Country, employees.FirstName || ' ' || employees.LastName AS Sales_Agent, 
       SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS Invoice_Total
FROM invoices
LEFT JOIN customers ON invoices.CustomerId = customers.CustomerId
LEFT JOIN employees ON customers.SupportRepId = employees.EmployeeId
LEFT JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
GROUP BY invoices.InvoiceId, Customer_Name, customers.Country, Sales_Agent
ORDER BY invoices.InvoiceId
;



-- displays all invoices for 2009

SELECT COUNT(InvoiceId) AS total_invoices_2009 
FROM invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
;



-- displays total sales for 2009

SELECT SUM(Total) AS total_sales_2009 
FROM invoices
WHERE strftime('%Y', InvoiceDate) = '2009'
;



-- displays the purchased track name, artist name with each invoice id

SELECT invoices.InvoiceId, tracks.Name AS Track_Name, artists.Name AS Artist_Name
FROM invoices
INNER JOIN invoice_items ON invoices.InvoiceId = invoice_items.InvoiceId
INNER JOIN tracks ON invoice_items.TrackId = tracks.TrackId
INNER JOIN albums ON tracks.AlbumId = albums.AlbumId
INNER JOIN artists ON albums.ArtistId = artists.ArtistId
ORDER BY invoices.InvoiceId
;



-- displays all the tracks with album name, media type and genre

SELECT tracks.Name AS Track_Name, albums.Title AS Album_Name, 
       media_types.Name AS Media_Type, genres.Name AS Genre
FROM tracks
INNER JOIN albums ON tracks.AlbumId = albums.AlbumId
INNER JOIN media_types ON tracks.MediaTypeId = media_types.MediaTypeId
INNER JOIN genres ON tracks.GenreId = genres.GenreId
ORDER BY tracks.Name
;



-- displays the sales agent with most sales

SELECT employees.LastName || ', ' || employees.FirstName AS Sales_Agent, 
       SUM(invoices.Total) AS Total_Sales
FROM employees
JOIN customers ON employees.EmployeeId = customers.SupportRepId
JOIN invoices ON customers.CustomerId = invoices.CustomerId
GROUP BY employees.EmployeeId  
ORDER BY Total_Sales DESC
LIMIT 1
;



-- displays monthly total sales 

SELECT strftime('%Y-%m', invoices.InvoiceDate) AS Month, SUM(invoices.Total) AS Total_Sales
FROM invoices
GROUP BY Month
ORDER BY Month
;



-- displays top 5 popular artist by sales

SELECT artists.Name AS Artist, 
       SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS Total_Sales
FROM invoice_items
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
JOIN albums ON tracks.AlbumId = albums.AlbumId
JOIN artists ON albums.ArtistId = artists.ArtistId
GROUP BY artists.ArtistId
ORDER BY Total_Sales DESC
LIMIT 5
;



-- displays best selling genre

SELECT genres.Name AS Genre, 
       SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS Total_Sales
FROM invoice_items
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
JOIN genres ON tracks.GenreId = genres.GenreId
GROUP BY genres.GenreId
ORDER BY Total_Sales DESC
LIMIT 1
;



-- displays top 10 best selling albums

SELECT albums.Title AS Album, artists.Name AS Artist, 
       SUM(invoice_items.Quantity) AS Total_Tracks_Sold
FROM invoice_items
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
JOIN albums ON tracks.AlbumId = albums.AlbumId
JOIN artists ON albums.ArtistId = artists.ArtistId
GROUP BY albums.AlbumId
ORDER BY Total_Tracks_Sold DESC
LIMIT 10
;
